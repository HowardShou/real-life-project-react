{"version":3,"sources":["components/PhotoFetcher/index.js"],"names":["useStyles","makeStyles","theme","root","display","flexDirection","backgroundColor","palette","background","paper","borderRadius","igStyle","top","transform","width","height","PhotoFetcher","props","useTheme","matchesXS","useMediaQuery","breakpoints","only","matchesSM","useState","page","setPage","picUrl","setPicUrl","classes","useSWR","pics","data","isValidating","formatPics","useMemo","map","detail","idx","download_url","split","protocol","domainArr","splice","newUrl","join","cols","handleClick1","useCallback","type","payload","x","Math","floor","random","useEffect","mb","container","spacing","xs","sm","justify","variant","color","onClick","e","value","count","size","onChange","className","cellHeight","gridList","pic","src","alt","title","style"],"mappings":"sSAiBA,IAAMA,EAAYC,aAAW,SAACC,GAC5B,MAAO,CACLC,KAAM,CACJC,QAAS,OACTC,cAAe,SACfC,gBAAiBJ,EAAMK,QAAQC,WAAWC,MAC1CC,aAAc,WAKdC,EAAU,CACdC,IAAK,MACLC,UAAW,mBACXC,MAAO,OACPC,OAAQ,OACRL,aAAc,OA2FDM,UAxFM,SAACC,GACpB,IAAMf,EAAQgB,cACRC,EAAYC,YAAclB,EAAMmB,YAAYC,KAAK,OACjDC,EAAYH,YAAclB,EAAMmB,YAAYC,KAAK,OAHzB,EAINE,mBAAS,GAJH,mBAIvBC,EAJuB,KAIjBC,EAJiB,OAKFF,mBAAS,sCAAD,OAAuCC,IAL7C,mBAKvBE,EALuB,KAKfC,EALe,KAMxBC,EAAU7B,IANc,EAQO8B,YAAOH,GAA9BI,EARgB,EAQtBC,KAAYC,EARU,EAQVA,aAEdC,EAAaC,mBACjB,yBACEJ,QADF,IACEA,OADF,EACEA,EAAMK,KAAI,SAACC,EAAQC,GAAS,IAAD,EACKD,EAAOE,aAAaC,MAAM,MAD/B,mBAClBC,EADkB,KAEnBC,EAFmB,KAEGF,MAAM,KAFT,EAGHE,EAAUC,QAAQ,EAAG,GAHlB,6BAMzB,IAAMC,EAAM,UAAMH,EAAN,aAAmBC,EAAUG,KAAK,KAAlC,YAFJ,IAEI,YADH,KAGLC,EAAO,EAKX,OAJIvB,EAAWuB,EAAO,EACb3B,EAAW2B,EAAO,GACjBR,EAAM,GAAK,IAAM,IAAGQ,EAAO,GAE9B,2BAAKT,GAAZ,IAAoBE,aAAcK,EAAQE,cAE9C,CAACf,EAAMZ,EAAWI,IAGdwB,EAAeC,uBAAY,SAACC,EAAMC,GACtC,OAAQD,GACN,IAAK,SACHvB,EAAQwB,GACR,MACF,IAAK,SACHxB,GA3DWyB,EA2DO,GA1DjBC,KAAKC,MAAMD,KAAKE,SAAWH,GAAK,IADzC,IAAmBA,IAgEd,IAMH,OAJAI,qBAAU,WACR3B,EAAU,sCAAD,OAAuCH,MAC/C,CAACA,IAGF,eAAC,IAAD,CAAKrB,QAAQ,QAAQU,MAAM,OAA3B,UACE,cAAC,IAAD,CAAK0C,GAAI,EAAT,SACE,eAAC,IAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,UACE,cAAC,IAAD,CAAMD,WAAS,EAACE,GAAI,GAAIC,GAAI,EAAGC,QAAS1C,EAAY,SAAW,aAA/D,SACE,cAAC,IAAD,CAAKqC,GAAIrC,EAAY,EAAI,EAAzB,SACE,cAAC,IAAD,CAAQ2C,QAAQ,YAAYC,MAAM,UAAUC,QAAS,SAACC,EAAGC,GAAJ,OAAcnB,EAAa,SAAUmB,IAA1F,mCAKJ,cAAC,IAAD,CAAMT,WAAS,EAACE,GAAI,GAAIC,GAAI,EAAGC,QAAS1C,EAAY,SAAW,WAA/D,SACE,cAAC,IAAD,CACEgD,MAAO,GACP1C,KAAMA,EACNsC,MAAM,UACNK,KAAM7C,EAAY,QAAU,SAC5B8C,SAAU,SAACJ,EAAGC,GAAJ,OAAcnB,EAAa,SAAUmB,aAKtDjC,EACC,cAAC,IAAD,IAEA,qBAAKqC,UAAWzC,EAAQ1B,KAAxB,SACE,cAAC,IAAD,CAAUoE,WAAY,IAAKD,UAAWzC,EAAQ2C,SAAU1B,KAAM,EAA9D,SACIZ,EAAD,OAEGA,QAFH,IAEGA,OAFH,EAEGA,EAAYE,KAAI,SAACqC,GAAD,OACd,cAAC,IAAD,CAAqC3B,KAAM2B,EAAI3B,MAAQ,EAAvD,SACE,cAAC,IAAD,CAAO4B,IAAKD,EAAIlC,aAAcoC,IAAKF,EAAIG,MAAOC,MAAOlE,KADpC8D,EAAIlC,iBAFzB","file":"static/js/11.b26d5e6b.chunk.js","sourcesContent":["import { useState, useMemo, useEffect, useCallback } from 'react'\nimport useSWR from 'swr'\nimport Button from '@material-ui/core/Button'\nimport { makeStyles, useTheme } from '@material-ui/core/styles'\nimport Grid from '@material-ui/core/Grid'\nimport GridList from '@material-ui/core/GridList'\nimport GridListTile from '@material-ui/core/GridListTile'\nimport Pagination from '@material-ui/lab/Pagination'\nimport Image from 'material-ui-image'\nimport Box from '@material-ui/core/Box'\nimport LoadingCircle from 'components/LoadingCircle'\nimport useMediaQuery from '@material-ui/core/useMediaQuery'\n\nfunction getRandom(x) {\n  return Math.floor(Math.random() * x) + 1\n}\n\nconst useStyles = makeStyles((theme) => {\n  return {\n    root: {\n      display: 'flex',\n      flexDirection: 'column',\n      backgroundColor: theme.palette.background.paper,\n      borderRadius: '5px',\n    },\n  }\n})\n\nconst igStyle = {\n  top: '50%',\n  transform: 'translateY(-50%)',\n  width: '100%',\n  height: '100%',\n  borderRadius: '5px',\n}\n\nconst PhotoFetcher = (props) => {\n  const theme = useTheme()\n  const matchesXS = useMediaQuery(theme.breakpoints.only('xs'))\n  const matchesSM = useMediaQuery(theme.breakpoints.only('sm'))\n  const [page, setPage] = useState(1)\n  const [picUrl, setPicUrl] = useState(`https://picsum.photos/v2/list?page=${page}`)\n  const classes = useStyles()\n\n  const { data: pics, isValidating } = useSWR(picUrl)\n\n  const formatPics = useMemo(\n    () =>\n      pics?.map((detail, idx) => {\n        const [protocol, domainStr] = detail.download_url.split('//')\n        const domainArr = domainStr.split('/')\n        let [width, height] = domainArr.splice(-2, 2)\n        width = 600\n        height = 600\n        const newUrl = `${protocol}//${domainArr.join('/')}/${width}/${height}`\n\n        let cols = 1\n        if (matchesSM) cols = 2\n        else if (matchesXS) cols = 4\n        else if ((idx + 1) % 3 === 0) cols = 2\n\n        return { ...detail, download_url: newUrl, cols }\n      }),\n    [pics, matchesXS, matchesSM]\n  )\n\n  const handleClick1 = useCallback((type, payload) => {\n    switch (type) {\n      case 'normal':\n        setPage(payload)\n        break\n      case 'random':\n        setPage(getRandom(30))\n        break\n      default:\n        break\n    }\n  }, [])\n\n  useEffect(() => {\n    setPicUrl(`https://picsum.photos/v2/list?page=${page}`)\n  }, [page])\n\n  return (\n    <Box display='block' width='100%'>\n      <Box mb={2}>\n        <Grid container spacing={1}>\n          <Grid container xs={12} sm={6} justify={matchesXS ? 'center' : 'flex-start'}>\n            <Box mb={matchesXS ? 2 : 0}>\n              <Button variant='contained' color='primary' onClick={(e, value) => handleClick1('random', value)}>\n                Fetch Random Page\n              </Button>\n            </Box>\n          </Grid>\n          <Grid container xs={12} sm={6} justify={matchesXS ? 'center' : 'flex-end'}>\n            <Pagination\n              count={30}\n              page={page}\n              color='primary'\n              size={matchesSM ? 'small' : 'medium'}\n              onChange={(e, value) => handleClick1('normal', value)}\n            />\n          </Grid>\n        </Grid>\n      </Box>\n      {isValidating ? (\n        <LoadingCircle />\n      ) : (\n        <div className={classes.root}>\n          <GridList cellHeight={200} className={classes.gridList} cols={4}>\n            {!formatPics\n              ? []\n              : formatPics?.map((pic) => (\n                  <GridListTile key={pic.download_url} cols={pic.cols || 1}>\n                    <Image src={pic.download_url} alt={pic.title} style={igStyle} />\n                  </GridListTile>\n                ))}\n          </GridList>\n        </div>\n      )}\n    </Box>\n  )\n}\n\nexport default PhotoFetcher\n"],"sourceRoot":""}